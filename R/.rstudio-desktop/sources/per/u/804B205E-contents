# rlist tutorial
devtools::install_github("renkun-ken/rlist")
library(rlist)
library(magrittr)
library(pipeR)

url <- "https://renkun-ken.github.io/rlist-tutorial/data/people.json"
people <- list.load(url)
people %>>%
  list.filter(Expertise$R >= 1 & Expertise$Python >= 1) %>>%
  list.class(Interests) %>>%
  list.sort(-length(.)) %>>%
  list.take(3) %>>%
  list.map(. %>>% list.table(Age))

a <- list(a = 1:3, b = "a string", c = pi, d = list(-1, -5))
a$b
a$c
a$d

df <- data.frame(
  a = rnorm(10),
  b = rnorm(10),
  c = rnorm(10),
  d = rnorm(10)
)

results <- numeric(length(df))
for (i in seq_along(df)) {
  results[i] <- mean(df[[i]])
}
results

models <- mtcars %>% 
  split(.$cyl) %>% 
  map(function(df) lm(mpg ~ wt, data = df))

models %>% 
  map(summary) %>% 
  map_dbl(~.$r.squared)

mtcars %>% 
  map_lgl(is.factor) %>% 
  {.[[1]]}

url1 <- "https://api.github.com/repos/hadley/r4ds/issues"
issues <- list.load(url1)

issues %>% 
  map_int(~.$id)

issues %>% map_lgl("locked")

issues %>% map_chr("state")

users <- issues %>% map("user")

users %>% map_chr("login")

issues %>% map_chr(c("user", "login"))

issues %>% map_int(c("user", "id"))

pipeline(
  mtcars$mpg,
  sample(., size = 1000, replace = TRUE),
  density(kernel = "gaussian"),
  plot(col = "red", main = "density of mpg (bootstrap)")
)

pipeline({
  mtcars$mpg
  sample(., size = 100, replace = TRUE)
  density(kernel = "gaussian")
  plot(col = "red", main = "density of mpg (bootstrap)")
})

library(ggplot2) 
attach(mtcars) 
counts <- table(gear)                                                           # count the number of cars per gear 
df <- as.data.frame.table(counts,                                       # convert the count table to a dataframe 
                          responseName = "freq") 

df1 <- as.data.frame.table(table(vs, gear),                     # create a dataframe of car by gears and engine type 
                           responseName = "freq") 

# basic bar graph        
p1 <- ggplot(data=df, aes(x=gear, y=freq)) + 
  geom_bar(stat="identity")    
print(p1) 

# basic 2-variable bar graph 
p2 <- ggplot(data=df1, aes(x=gear, y=freq, fill=vs)) +  
  geom_bar(stat="identity")  
print(p2) 

# basic line graph 
p3 <- ggplot(data=df, aes(x=gear, y=freq, group=1)) +  
  geom_line()  
print(p3)

df$xmin <- as.numeric(df$gear) - 0.1                            # where each bar should start on the x-axis 
df$xmax <- as.numeric(df$gear) + 0.1                            # where each bar should end on the x-axis 
df$ymin <- 1                                                                            # where each bar should start on the y-axis 
df$ymax <- df$freq                                                                      # where each bar should end on the y-axis 
xrange <- range(min(df$xmin) - 0.1,                             # specify the range of the x-axis                
                max(df$xmax) + 0.1)      
yrange <- range(min(df$ymin),                                           # specify the range of the y-axis 
                max(df$ymax) + 1)        
mapping <- aes(xmin=xmin,ymin=ymin,xmax=xmax,ymax=ymax) 

p1 <- ggplot(data=df, aes(x=gear, y=freq)) + 
  xkcdrect(mapping,df) +                                                  # xkcd function to plot the bar shapes           
  xkcdaxis(xrange,yrange) +  
  xlab("number of gears") +  
  ylab("frequency") +  
  scale_x_discrete(labels=c(as.character(df$gear))) 
print(p1) 

df$xmin <- as.numeric(df$gear) - 0.4                            # make the bars wider    
df$xmax <- as.numeric(df$gear) + 0.4                            # make the bars wider 
df$ymin <- 1                                                                             
df$ymax <- df$freq                       
xrange <- range(min(df$xmin) - 0.1,  
                max(df$xmax) + 0.1)      
yrange <- range(min(df$ymin),  
                max(df$ymax) + 1)        
mapping <- aes(xmin=xmin,ymin=ymin,xmax=xmax,ymax=ymax) 
p2 <- ggplot(data=df, aes(x=gear, y=freq)) +  
  xkcdrect(mapping,df) +                   
  xkcdaxis(xrange,yrange) +  
  xlab("number of gears") +  
  ylab("frequency") +  
  scale_x_discrete(labels=c(as.character(df$gear))) 
print(p2) 

# 2-variable bar graph 
vs0 <- subset(df1, vs=="0")                                                     # subset the df1 dataframe to include only vs=0  
vs1 <- subset(df1, vs=="1")                                                     # subset the df1 dataframe to include only vs=1  
vs0$xmin <- as.numeric(vs0$gear) - 0.4 
vs0$xmax <- as.numeric(vs0$gear) + 0.4 
vs0$ymin <- 0 
vs0$ymax <- 0 
vs0[vs0$vs=="0", ]$ymin <- 1 
vs0[vs0$vs=="0", ]$ymax <- vs0[vs0$vs=="0", ]$freq 
vs1$xmin <- as.numeric(vs1$gear) - 0.4 
vs1$xmax <- as.numeric(vs1$gear) + 0.4 
vs1$ymin <- 0 
vs1$ymax <- 0 
vs1[vs1$vs=="1", ]$ymin <- vs0[vs0$vs=="0", ]$freq 
vs1[vs1$vs=="1", ]$ymax <-  vs1[vs1$vs=="1", ]$freq + vs0[vs0$vs=="0", ]$freq 
xrange <- range(min(rbind(vs0, vs1)$xmin) - 0.1,  
                max(rbind(vs0, vs1)$xmax) + 0.1) 
yrange <- range(min(rbind(vs0, vs1)$ymin),  
                max(rbind(vs0, vs1)$ymax) + 1) 
mapping <- aes(xmin=xmin,ymin=ymin,xmax=xmax,ymax=ymax) 
p3 <- ggplot(data=vs0, aes(x=gear, y=freq)) +  
  xkcdrect(mapping,vs0, size=1.8) +                               # the size controls the distance jitter                  
  xkcdaxis(xrange,yrange) +                                               # and therefore the separation between the v0 and v1 bars 
  xlab("number of gears") +  
  ylab("frequency") +  
  geom_line(aes(0, 0, color="v-engine")) +  
  scale_x_discrete(labels=c(as.character(vs1$gear))) + 
  theme(legend.position="top",                                    # move legend to top 
        legend.title=element_blank())                           # remove legend title 
p3 <- p3 + xkcdrect(mapping,vs1,fill="#EA8689") +  
  geom_line(aes(0, 0, color="straight-engine")) + 
  scale_color_manual(values=c("v-engine"="grey20", "straight-engine"="#EA8689")) 
print(p3) 

# line graph 
xrange <- range(1:length(df$gear)) 
yrange <- range(df$freq) 
p4 <- ggplot(data=df, aes(x=gear, y=freq, group=1)) +  
  geom_line() +  
  xkcdaxis(xrange,yrange) + 
  xlab("number of gears") +  
  ylab("frequency")  
print(p4)



